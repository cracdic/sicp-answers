#lang racket
(require scheme/mpair)

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          (car front-ptr)))
    (define (insert-queue! item)
      (cond ((empty-queue?)
             (let ((init-list (mlist item)))
               (set! front-ptr init-list)
               (set! rear-ptr init-list)
               front-ptr))
            (else
             (let ((new-item (mlist item)))
               (set-mcdr! rear-ptr new-item)
               (set! rear-ptr new-item)
               front-ptr))))
      (define (delete-queue!)
        (cond ((empty-queue?)
               (error "DELETE! called with an empty queue"))
              (else
               (set! front-ptr (mcdr front-ptr))
               front-ptr)))
      (define (dispatch m)
        (cond ((eq? m 'insert-queue!)
               insert-queue!)
              ((eq? m 'delete-queue!)
               (delete-queue!))
              ((eq? m 'empty-queue?)
               (empty-queue?))
              (else
               (error "Unknow operation -- DISPATCH" m))))
      dispatch))
      